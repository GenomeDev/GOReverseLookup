# --- Input file for GO Reverse Lookup --- #
#
# The input file contains several sections, each section in this file is denoted by ### preceding the section name.
# The values in each section are TAB-delimited.
#
# *** Evidence code groups section ****
# Contains the whole "tree" of possible evidence codes, attributed to their groups. This section only determines the possible evidence codes groups and specific evidence codes.
# The evidence code groups and specific evidence codes are not set in this section, but rather in the Settings section via the evidence_codes setting.
# This section exists to give user the option to add or exclude any evidence codes, should the GO evidence codes change in the future.
# Each line contains two tab-separated elements:
#	(1) evidence code group name (e.g. author_statement)
#   (2) evidence codes (e.g. TAS,NAS) belonging to the group, along with their ECO identifiers (evidence code and identifier separated by underscore) as comma-separated values (e.g. TAS_ECO:0000304,NAS_ECO:0000303)
#		ECO evidence code identifiers can be found on https://wiki.geneontology.org/index.php/Guide_to_GO_Evidence_Codes and https://www.ebi.ac.uk/QuickGO/term/ECO:0000245
# WARNING: the Evidence codes section MUST be specified before the Settings section.
#
# *** Settings section ***
# It contains several settings, which are used to change the flow of the algorithm.
# The possible settings are:
#	- evidence_codes: 
#			Determines which annotations between GO terms and respective genes (vice versa) to accept, based on evidence codes.
#			Based on https://geneontology.org/docs/guide-go-evidence-codes/, there are the following 6 evidence groups (noted with belonging evidence codes):
#			  a. experimental evidence (EXP, IDA, IPI, IMP, IGI, IEP, HTP, HDA, HMP, HGI, HEP) [experimental]
#			  b. phylogenetically inferred evidence (IBA, IBD, IKR, IRD) [phylogenetic]
#			  c. computational analysis evidence (ISS, ISO, ISA, ISM, IGC, RCA) [computational_analysis]
#			  d. author statement evidence (TAS, NAS) [author_statement]
#			  e. curator statement evidence (IC, ND) [curator_statement]
#			  f. electronic annotation (IEA) [electronic]
#			In the settings, user can choose which evidence codes are valid for the program by specifying evidence groups, and, with the usage of (...) also which exact evidence codes to (or not to) take into account.
#			
#			For example, to take into account all evidence codes belonging to experimental evidence, use a tilde (~)
#				evidence_codes experimental(~)
#			
#			To take into account only specific evidence codes from a group, specify them between the parantheses. If evidence codes
#			are specified among parantheses, all non-specified evidence codes will be excluded. 
#			For example, to take into account only IC, but not ND, from curator_statement, use the following:
#				evidence_codes curator_statement(IC)
#
#			Similarly, you can use an exclamation mark '!' to exclude evidence codes, while retaining the non-specified evidence codes.
#			To exclude only HEP and retain the rest of experimental evidence codes, use:
#				evidence_codes !experimental(HEP)
#
#			By default, if an evidence group is not specified, all belonging evidence codes will still be valid.
#			To exclude evidence codes belonging to a group, do so with an exclamation mark '!'.
#			For example, to exclude entire group of computational analysis evidence codes, use:
#				evidence_codes !computational_analysis(~)
#
#			To merge multiple groups, supply them to the evidence_codes setting as comma-separated-values:
#				evidence_codes experimental(~),phylogenetic(~),computational_analysis(~),author_statement(TAS),curator_statement(IC),!electronic(~)
#
# 	- fisher_test_use_online_query:
#			If True, will query the products of GO Terms (for the num_goterms_products_general inside fisher test) via an online pathway (GOApi.get_goterms).
#			If False, fisher test will compute num_goterms_products_general (= the number of goterms associated with a product) via an offline pathway using GOAF parsing.
#
#	- include_indirect_annotations:
#			When querying GO terms associated with genes, only specific directly annotated GO Terms are returned (this is a direct annotation).
#			However, all of the children of a directly annotated GO Term are also indirectly connected to the gene in question (these are indirect annotations).
#
#			Likewise, when computing the number of GO Terms associated with a user-defined SOI , the GO Terms that the user defines count as direct annotations.
#			However, all the children of the directly annotated GO Terms (indirect annotations) to a SOI should also count towards the modulation of that SOI.
#
#			If this setting is set to True, each each GO Term relevant to the analysis will have a list of it's child term ids computed (using go.obo). These ids will be taken
#			into account when performing the fisher exact test. 
#			If this setting is set to False, only directly annotated GO Terms will be accounted for during the scoring process.
#
#	- uniprotkb_genename_online_query:
#			When querying all genes associated to a GO Term, Gene Ontology returns UniProtKB identified genes (amongst others, such as ZFIN, Xenbase, MGI, RGD).
#			During the algorithm, gene name has to be determined from the UniProtKB id, which is done in (Product).fetch_ortholog_async function.
#			The gene name can be obtained via two pathways:
#				a) online pathway, using: info_dict = await uniprot_api.get_uniprot_info_async(self.id_synonyms[0], session)
#				b) offline pathway, using the GO Annotations File: info_dict = {"genename": goaf.get_uniprotkb_genename(self.id_synonyms[0])}
#			During testing which pathway is more accurate in querying a gene name from a UniProtKB identifier, it was found that querying using the offline pathway (GOAF)
#			resulted in obtaining more valid gene names that an online query to the uniprotkb servers themselves. Therefore, if using the latest GOAF, it is advisable to set
#			this setting to False. If using an older GOAF, then have this setting set to True.
#			If True, will query genename from a UniProtKB id via an online server request.
#			If False, will query genename from a UniProtKB id via the GO Annotations File.
#
#	- pvalue:
#			Represents the p-value against which the genes will be scored to determine if they are statistically significant. For example, if the VEGFA gene has pvalues smaller than
#			the set pvalue (default is 0.05) for all the SOIs of the user (eg. cancer+, inflammation+) AND also higher pvalues than the set pvalue for opposite SOIs
#			(eg. cancer-, inflammation-), then the VEGFA gene is said to be statistically important in the event of coexistance of inflammation and cancer.
#
#	- gorth_ortholog_refetch:
#			We implemented a gOrth batch ortholog query (https://biit.cs.ut.ee/gprofiler/orth), which is called using (ReverseLookup).fetch_orthologs_products_batch_gOrth(target_taxon_number=...) function.
#			The function attempts to find orthologs to genes in a single batch request. If 'gorth_ortholog_refetch' is True, then the genes for which orthologs were not found,
#			will be re-fetched using the regular asynchronous ortholog query pipeline. If 'gorth_ortholog_refetch' is False, then the genes for which orthologs were not found will not be queried for orthologs again.
#
#			Warning: For some identifiers, gOrth ortholog query can be inconsistent. For example, consider the MGI id MGI:96824 (Tlr4) (UniProtKB:Q9QUK6): gOrth query from "Mus musculus" to "Homo sapiens" using ENTREZGENE-ACC finds no ortholog for
#			the MGI id (96824), however it finds an ortholog when querying using the UniProtKB id (Q9QUK6) for the same gene. On the other hand, gOrth query for MGI:99512 (Wdr47) (UniProtKB:Q8CGF6) is consistent both for the MGI and for the UniProtKB identifiers.
#			In the default code example, the algorithm attempts to map "3rd party" identifiers (such as ZFIN, RGD, ...) to respective UniProtKB and Ensembl identifiers, prior to executing the gOrth ortholog mappings, since mapping using UniProt or Ensembl ids was shown
#			to be more reliable.
#			
#			For developers: It is highly advisable to call (ReverseLookup).products_perform_idmapping() prior to calling (ReverseLookup).fetch_orthologs_products_batch_gOrth(), so as to map as many "3rd party" ids (RGD, ZFIN, etc) to UniProtKB and Ensembl ids, which
#			are then implicitly used inside fetch_orthologs_products_batch_gOrth() to obtain the best gOrth ortholog mapping results.
#
#	- gorth_ortholog_fetch_for_indefinitive_orthologs
#			The gOrth batch query implementation can return the following options: a) multiple orthologous genes (these are called "indefinitive orthologs"), b) a single orthologous gene (called a "definitive ortholog") or 
#			c) no orthologous genes. In our asynchronos ortholog query pipeline implementation, when multiple orthologous genes are returned from Ensembl, the orthologous gene with the highest percentage identity ("perc_id") is
#			selected as the best ortholog and is assigned as the true ortholog to the input gene. However, gOrth has currently (10_29_2023) no option to return the "best" orthologous gene, neither it has the option to exclude obsolete ortholog gene ids (confirmed by the gProfiler team via an email conversation).
#			Therefore, it is advisable to keep the gorth_ortholog_fetch_for_indefinitive_orthologs to True, so that indefinitive orthologs are discarded from the gOrth ortholog query and are instead fetched by the asynchronos pipeline, which has the ability to 
#			select the best ortholog for the input gene. Having this setting set to False will choose, in the case of "indefinitive orthologs", the first returned ortholog id from the gOrth query, but with no guarantees that this ortholog id is not obsolete.
#
#  - goterm_gene_query_timeout:
#			The timeout (in seconds) after which a goterm gene (product) query will be dropped. GO terms with ~30.000 associated genes take approximately 14 seconds to query.
#			Must be specified as an integer.
#			This setting impacts both synchronous and asynchronous requests. Do note that async requests may take longer than the aforementioned example.
#
#  - goterm_gene_query_max_retries:
#			The maximum amount of request retries for a single GO term gene (product) query
#
#  - exclude_opposite_regulation_direction_check:
#           Determines if, during the gene scoring, both regulation directions (positive or negative) or only a single regulation direction should be accounted for.
#           If True, will check only the direction of regulation for a target SOI, without taking into account the opposite regulation.
#           For example, if target SOI is 'angiogenesis+' (stimulation of angiogenesis), and this setting is True, then only the p-values related to
#           'angiogenesis+' will be used (aim: p<0.05), whereas the p-values for the opposite SOI 'angiogenesis-' (inhibition of angiogenesis) will not be used.
#           If the setting is False, then a product will be statistically significant only if its p-value is less than 0.05 for target SOI (e.g. 'angiogenesis+') and
#           its p-value for the opposite SOI greater than 0.05 (e.g. 'angiogenesis-')
#
# *** States of interest section ***
# It contains the SOIs in question to the researcher and the direction of regulation of these SOIs. For example, if
# a researcher is interested in the genes that positively contribute to both chronic inflammation and cancer, the researcher would construct SOIs section as:
# 	chronic_inflammation	+
#	cancer	+
# The SOIs are also used in the GO_terms section, to specify how a GO Term contributes to a given SOI.
#
# *** Categories section ***
# Gene Ontology provides three categories of annotations (as known as Gene Ontology Aspects):
# 	- molecular_activity
#   - biological_process
#   - cellular_component
# The categories section allows you to determine which GO Terms will be queried either from online or from the GO Annotations File.
# For example, when a researcher is only interested in GO Terms related to molecular activity and biological processes, querying GO Terms
# related to a cellular component might result in an incorrect gene scoring process, resulting in some genes being scored as statistically insignificant,
# whereas they should be statistically significant. Thus, a researcher should turn off or on the GO categories according to the research goals.
# To turn on or off a specific GO category, provide a tab-delimited True or False value next to that category.
#
# *** GO_terms section ***
# It contains all of the GO Terms that will be used in the analysis. Each line in the section contains one GO Term,
# with the following tab-delimited values:
#	- [0]: GO Term identifier (eg. GO:0006954)
#   - [1]: SOI, which the GO Term supposedly regulates (eg. chronic_inflammation)
#   - [2]: positive or negative regulation direction of the SOI (+ or -)
#   - [3]: weight: the presumed importance of a GO Term in regulating the SOI. It is used only in the adv_product_score statistical test (a custom implementation of gene importance). If you only intend on using the Fisher's test, the weights are insignificant, just set them to 1.
#   - [4]: GO Term name: the name of the GO Term (optional)
#   - [5]: GO Term description: the description of the GO Term (optional)
# 
# This input file should be called by one of the two methods:
# a) Using Workflows:
# 		from goreverselookuplib.Workflows import WorkflowTwo
#		from goreverselookuplib.CacheUtils import Cacher
#		
#		Cacher.init()
#		workflow = WorkflowTwo(input_file_fpath="PATH_TO_THIS_INPUT_FILE", save_folder_dir="PATH_TO_SAVE_FOLDER_DIRECTORY")
#		workflow.run_workflow()
#
# b) Using ReverseLookup model
# 	 	from goreverselookuplib import ReverseLookup
#		from goreverselookuplib.CacheUtils import Cacher
#		from goreverselookuplib.Metrics import nterms, adv_product_score, binomial_test, fisher_exact_test
#
#		model_save_filepath = "model/data.json"
#		input_file_filepath = "model/input.txt"
#		statistically_significant_genes_filepath = "model/stat_significant_genes.json"
#
#		# setup cacher and model instance
#		Cacher.init()
#		model = ReverseLookup.from_input_file(input_file_filepath)
#
#		# query model data
#		model.fetch_all_go_term_names_descriptions(run_async=True)
#		model.fetch_all_go_term_products(web_download=True, run_async=True, recalculate=False, max_connections = 60, request_params={"rows":50000}, delay = 0.0)
#		model.create_products_from_goterms()
#		model.products_perform_idmapping()
#		model.fetch_orthologs_products_batch_gOrth(target_taxon_number="9606")
#		model.fetch_ortholog_products(refetch=False, run_async = True, max_connections=15, req_delay=0.1, semaphore_connections=5)
#		model.prune_products()
#		model.save_model(model_save_filepath)
#		
#		# perform scoring
#		goaf = GOAnnotiationsFile(go_categories=model.go_categories)
#		nterms_test = nterms(model)
#		adv_test = adv_product_score(model)
#		binomtest = binomial_test(model, goaf)
#		fishertest = fisher_exact_test(model, goaf)
#		model.score_products(score_classes=[nterms_test,adv_test,binomtest,fishertest], recalculate=True)
#		model.save_model(model_save_filepath)
#		model.perform_statistical_analysis(filepath=statistically_significant_genes_filepath)
#
#		# in future runs, you can load up the model using:
#		model_data_file = "model/data.json"
#		model = ReverseLookup.load_model(model_data_file)
###evidence_code_groups
experimental	EXP_ECO:0000269,IDA_ECO:0000314,IPI_ECO:0000353,IMP_ECO:0000315,IGI_ECO:0000316,IEP_ECO:0000270,HTP_ECO:0006056,HDA_ECO:0007005,HMP_ECO:0007001,HGI_ECO:0007003,HEP_ECO:0007007
phylogenetic	IBA_ECO:0000318,IBD_ECO:0000319,IKR_ECO:0000320,IRD_ECO:0000321
computational_analysis	ISS_ECO:0000250,ISO_ECO:0000266,ISA_ECO:0000247,ISM_ECO:0000255,IGC_ECO:0000317,RCA_ECO:0000245
author_statement	TAS_ECO:0000304,NAS_ECO:0000303
curator_statement	IC_ECO:0000305,ND_ECO:0000307
electronic	IEA_ECO:0000501
###settings
pvalue	0.05
target_organism	homo_sapiens|UniProtKB|NCBITaxon:9606 # format: organism_label|organism_database|ncbi_taxon
ortholog_organisms	danio_rerio|ZFIN|NCBITaxon:7955,rattus_norvegicus|RGD|NCBITaxon:10116,mus_musculus|MGI|NCBITaxon:10090,xenopus_tropicalis|Xenbase|NCBITaxon:8364
#evidence_codes	experimental(~),phylogenetic(~),computational_analysis(~),author_statement(TAS),!curator_statement(ND),!electronic(~)
evidence_codes	experimental(~),phylogenetic(~),computational_analysis(~),author_statement(TAS),!curator_statement(ND),electronic(~)
gorth_ortholog_fetch_for_indefinitive_orthologs	True
gorth_ortholog_refetch	False
fisher_test_use_online_query	False
include_indirect_annotations	True
uniprotkb_genename_online_query	False
goterm_gene_query_timeout	240
goterm_gene_query_max_retries	1
exclude_opposite_regulation_direction_check True
###filepaths
go_obo	data_files/go.obo	https://purl.obolibrary.org/obo/go.obo	all
goa_human	data_files/goa_human.gaf	http://geneontology.org/gene-associations/goa_human.gaf.gz	homo_sapiens
#goa_zfin TODO
#goa_rgd TODO
#goa_mgi TODO
#goa_xenbase TODO
ortho_mapping_zfin_human	data_files/zfin_human_ortholog_mapping.txt	https://zfin.org/downloads/human_orthos.txt	danio_rerio
ortho_mapping_mgi_human	data_files/mgi_human_ortholog_mapping.txt	https://www.informatics.jax.org/downloads/reports/HOM_MouseHumanSequence.rpt	mus_musculus
ortho_mapping_rgd_human	data_files/rgd_human_ortholog_mapping.txt	https://download.rgd.mcw.edu/data_release/HUMAN/ORTHOLOGS_HUMAN.txt	rattus_norvegicus
ortho_mapping_xenbase_human	data_files/xenbase_human_ortholog_mapping.txt	https://download.xenbase.org/xenbase/GenePageReports/XenbaseGeneHumanOrthologMapping.txt	xenopus
###states_of_interest [SOI name] [positive contribution to SOI: +, or negative contribution to SOI: -]
osteoporosis	+
sarcopenia	+
###categories [category] [True / False]
biological_process	True
molecular_activity	False
cellular_component	False
###GO_terms [GO id] [SOI] [upregulated + or downregulated - or general 0] [weight 0-1] [GO term name - optional] [GO term description - optional]
GO:0001503	osteoporosis	-	1	ossification
GO:0030282	osteoporosis	-	1	bone mineralization
GO:0030500	osteoporosis	-	1	regulation of bone mineralization
GO:0030501	osteoporosis	-	1	positive regulation of bone mineralization
GO:0030502	osteoporosis	+	1	negative regulation of bone mineralization
GO:0045778	osteoporosis	-	1	positive regulation of ossification
GO:0030279	osteoporosis	+	1	negative regulation of ossification
GO:0070168	osteoporosis	+	1	negative regulation of biomineral tissue development
GO:0001649	osteoporosis	-	1	osteoblast differentiation
GO:0033687	osteoporosis	-	1	osteoblast proliferation
GO:0002076	osteoporosis	-	1	osteoblast development
GO:0045669	osteoporosis	-	1	positive regulation of osteoblast differentiation
GO:0045668	osteoporosis	+	1	negative regulation of osteoblast differentiation
GO:0033690	osteoporosis	-	1	positive regulation of osteoblast proliferation
GO:0033689	osteoporosis	+	1	negative regulation of osteoblast proliferation
GO:0002158	osteoporosis	+	1	osteoclast proliferation
GO:0036035	osteoporosis	+	1	osteoclast development
GO:0036179	osteoporosis	+	1	osteoclast maturation
GO:0030316	osteoporosis	+	1	osteoclast differentiation
GO:0043932	osteoporosis	-	1	ossification involved in bone remodeling
GO:0046849	osteoporosis	+	1	bone remodeling
GO:0046850	osteoporosis	+	1	regulation of bone remodeling
GO:0045453	osteoporosis	+	1	bone resorption
GO:0046851	osteoporosis	-	1	negative regulation of bone remodeling
GO:0046852	osteoporosis	+	1	positive regulation of bone remodeling
GO:0045124	osteoporosis	+	1	regulation of bone resorption
GO:0045780	osteoporosis	+	1	positive regulation of bone resorption
GO:0045779	osteoporosis	-	1	negative regulation of bone resorption
GO:1901706	osteoporosis	-	1	mesenchymal cell differentiation involved in bone development
GO:0070977	osteoporosis	-	1	bone maturation
GO:1903012	osteoporosis	-	1	positive regulation of bone development
GO:0098868	osteoporosis	-	1	bone growth
GO:1903010	osteoporosis	-	1	regulation of bone development
GO:1903011	osteoporosis	+	1	negative regulation of bone development
GO:0098751	osteoporosis	-	1	bone cell development
GO:1903011	osteoporosis	+	1	negative regulation of bone development
GO:1903012	osteoporosis	-	1	positive regulation of bone development
GO:0060346	osteoporosis	-	1	bone trabecula formation
GO:0032652	osteoporosis	+	1	regulation of interleukin-1 production
GO:0032612	osteoporosis	+	1	interleukin-1 production
GO:0032675	osteoporosis	+	1	regulation of interleukin-6 production
GO:0032635	osteoporosis	+	1	interleukin-6 production
GO:0071706	osteoporosis	+	1	tumor necrosis factor superfamily cytokine production
GO:1903555	osteoporosis	+	1	regulation of tumor necrosis factor superfamily cytokine production
GO:0051896	osteoporosis	+	1	regulation of phosphatidylinositol 3-kinase/protein kinase B signal transduction
GO:0043548	osteoporosis	+	1	phosphatidylinositol 3-kinase binding
GO:0043422	osteoporosis	+	1	protein kinase B binding
GO:0007266	osteoporosis	-	1	Rho protein signal transduction
GO:0035023	osteoporosis	-	1	regulation of Rho protein signal transduction
GO:0008237	osteoporosis	+	1	metallopeptidase activity
GO:1990773	osteoporosis	+	1	matrix metallopeptidase secretion
GO:1905048	osteoporosis	+	1	regulation of metallopeptidase activity
GO:0035898	osteoporosis	+	1	parathyroid hormone secretion
GO:2000828	osteoporosis	+	1	"regulation of parathyroid hormone secretion
GO:0001957	osteoporosis	-	1	intramembranous ossification
GO:0001958	osteoporosis	-	1	endochondral ossification
GO:0071774	osteoporosis	-	1	response to fibroblast growth factor
GO:0040036	osteoporosis	-	1	regulation of fibroblast growth factor receptor signaling pathway
GO:0036301	osteoporosis	+	1	macrophage colony-stimulating factor production
GO:0072535	osteoporosis	+	1	tumor necrosis factor (ligand) superfamily member 11 production
GO:2000307	osteoporosis	+	1	regulation of tumor necrosis factor (ligand) superfamily member 11 production
GO:1902725	sarcopenia	+	1	negative regulation of satellite cell differentiation
GO:0014732	sarcopenia	+	1	skeletal muscle atrophy
GO:0017148	sarcopenia	+	1	negative regulation of translation
GO:0097190	sarcopenia	+	1	apoptotic signaling pathway
GO:0010657	sarcopenia	+	1	muscle cell apoptotic process
GO:0010658	sarcopenia	+	1	striated muscle cell apoptotic process
GO:0006954	sarcopenia	+	1	inflammatory response
GO:0002544	sarcopenia	+	1	chronic inflammatory response
GO:0002532	sarcopenia	+	1	production of molecular mediator involved in inflammatory response
GO:0002534	sarcopenia	+	1	cytokine production involved in inflammatory response
GO:1900017	sarcopenia	+	1	positive regulation of cytokine production involved in inflammatory response
GO:0005125	sarcopenia	+	1	cytokine activity
GO:0070741	sarcopenia	+	1	response to interleukin-6
GO:0032680	sarcopenia	+	1	regulation of tumor necrosis factor production
GO:0045087	sarcopenia	+	1	innate immune response
GO:0032613	sarcopenia	-	1	interleukin-10 production
GO:0032637	sarcopenia	+	1	interleukin-8 production
GO:0032635	sarcopenia	+	1	interleukin-6 production
GO:0032618	sarcopenia	-	1	interleukin-15 production
GO:0006953	sarcopenia	+	1	acute-phase response
GO:0032640	sarcopenia	+	1	tumor necrosis factor production
GO:0071159	sarcopenia	+	1	NF-kappaB complex
GO:0021523	sarcopenia	-	1	somatic motor neuron differentiation
GO:0014889	sarcopenia	+	1	muscle atrophy
GO:0014732	sarcopenia	+	1	skeletal muscle atrophy
GO:0014891	sarcopenia	+	1	striated muscle atrophy
GO:0036075	osteoporosis	-	1	replacement ossification